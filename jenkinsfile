pipeline {
	agent any
	tools {
		maven 'maven'
	}
	stages {
		stage('clone-repo'){
			steps {
				checkout scm
			}
		}
		stage('Build') {
			steps {
				sh 'mvn clean install'
			}
		}
		stage('sonarqube-scanging'){
			steps {
				withSonarQubeEnv('my-sonarqube-server') {
					sh 'mvn sonar:sonar'
				}
			}
		}
		stage('quality-gate-check'){
			steps {
				sh 'sleep 30s'
				waitForQualityGate abortPipeline: true
			}
		}
		stage('Upload to Artifactory') {
            steps {
                script {
                    // Define Artifactory upload specifics
                    def server = Artifactory.server 'jfrog-instance'
                    def uploadSpec = """{
                        "files": [
                            {
                                "pattern": "target/*.war",
                                "target": "online-bookstore/${BUILD_TIMESTAMP}/"
                            }
                        ]
                    }"""
                    server.upload(uploadSpec)
                }
            }
        }
		stage('Download from Artifactory') {
            steps {
                script {
                    sh 'mkdir -p ${WORKSPACE}/jfrog-downloaded'
					// Define Artifactory download specifics
                    def server = Artifactory.server 'jfrog-instance'
                    def downloadSpec = """{
                        "files": [
                            {
                                "pattern": "online-bookstore/${BUILD_TIMESTAMP}/*.war",
                                "target": "jfrog-downloaded/"
                            }
                        ]
                    }"""
                    server.download(downloadSpec)
                }
            }
        }
		stage('Deploy to TOmcat'){
			steps {
				// Use Jenkins credentials binding
				withCredentials([usernamePassword(credentialsId: 'TomcatCredentials', usernameVariable: 'TOMCAT_USER', passwordVariable: 'TOMCAT_PASS')]) {
					script {
						def tomcatUrl = 'http://34.227.93.131:8080//manager/text/deploy'
						def warFile = '${WORKSPACE}/jfrog-downloaded/${BUILD_TIMESTAMP}/onlinebookstore-1.0.war' // Adjust the path to your WAR file.
						
						echo "Executing: curl -T ${warFile} -u $TOMCAT_USER:$TOMCAT_PASS '${tomcatUrl}?path=/your-context-path&update=true'"
						sh """
							curl -T ${warFile} -u $TOMCAT_USER:$TOMCAT_PASS "${tomcatUrl}?path=/online-bookstore&update=true"
						"""
					}
				}
			}

		
		}
		

	}
}		
