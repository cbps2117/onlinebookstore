pipeline {
  agent any
  tools {
    maven 'maven-3.6.3'
  }
  stages{
    stage('clone') {
      steps {
        checkout scm
      }
    }
    stage('Build') {
      steps {
        sh 'mvn clean install'
      }
      post {
          always {
              archiveArtifacts artifacts: '**/*.war', onlyIfSuccessful: true
          }
      }
    }
    stage('sonarqube-scanning'){
      steps {
        withSonarQubeEnv('My SonarQube Server') {
          sh 'mvn sonar:sonar \
                -Dsonar.projectKey=online-book-store \
                -Dsonar.projectName="online-book-store" \
                -Dsonar.token=squ_c7fbb3bf3647607967ac2ed5a162ed0c5603bc67'
        }
      }
    }
    stage("Quality Gate") {
        steps {
          retry(3) {
            sh 'sleep 30s'
            waitForQualityGate abortPipeline: true
          }
        }
    }
    stage('Upload to Artifactory') {
            steps {
                script {
                    // Define a new Artifactory server instance
                    def server = Artifactory.server 'jfrog-instance'  // Replace 'ServerID' with your Artifactory server ID from Jenkins configuration.
                    
                    // Define the artifact
                    def uploadSpec = """{
                        "files": [
                            {
                                "pattern": "**/*.war",
                                "target": "online-bookstore/${BUILD_ID}/onlinebookstore-1.0.war"
                            }
                        ]
                    }"""

                    // Upload the artifact
                    server.upload(uploadSpec)
                }
            }
        }
        stage('Download from Artifactory') {
            steps {
                script {
					          sh 'mkdir -p ${WORKSPACE}/ready_deploy_binary/'
                    // Define the Artifactory server instance
                    def server = Artifactory.server 'jfrog-instance'  // Replace 'ServerID' with your Artifactory server ID from Jenkins configuration.

                    // Define download spec
                    def downloadSpec = """{
                        "files": [
                            {
                                "pattern": "online-bookstore/${BUILD_ID}/onlinebookstore-1.0.war",
                                "target": "${WORKSPACE}/ready_deploy_binary/"
                            }
                        ]
                    }"""

                    // Download the artifact
                    server.download downloadSpec
                }
            }
        }
	
	
	stage('Deploy to tomcat') {
            steps {
                script {
                    // Assuming the WAR file is in the target directory and named 'myapp.war'
                    def warFile = findFiles(glob: '${WORKSPACE}/ready_deploy_binary/${BUILD_ID}/onlinebookstore-1.0.war')[0].path

                    // Deploy to Tomcat
                    deploy adapters: [tomcat8(credentialsId: 'tomcat-deployer', path: '/onlinebookstore', url: 'http://54.173.76.28:8080/')], war: warFile
                }
            }
        }
    
  }
}
