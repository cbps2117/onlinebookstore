pipeline {
  agent any
  tools {
    maven 'maven-3.6.3'
  }
  stages{
    stage('clone') {
      steps {
        checkout scm
      }
    }
    stage('Build') {
      steps {
        sh 'mvn clean install'
      }
      post {
          always {
              archiveArtifacts artifacts: '**/*.war', onlyIfSuccessful: true
          }
      }
    }
    stage('sonarqube-scanning'){
      steps {
        withSonarQubeEnv('My SonarQube Server') {
          sh 'mvn sonar:sonar \
                -Dsonar.projectKey=online-book-store \
                -Dsonar.projectName="online-book-store" \
                -Dsonar.token=squ_c7fbb3bf3647607967ac2ed5a162ed0c5603bc67'
        }
      }
    }
    stage("Quality Gate") {
        steps {
          retry(3) {
            sh 'sleep 30s'
            waitForQualityGate abortPipeline: true
          }
        }
    }
    stage('Upload to Artifactory') {
            steps {
                script {
                    // Define a new Artifactory server instance
                    def server = Artifactory.server 'jfrog-instance'  // Replace 'ServerID' with your Artifactory server ID from Jenkins configuration.
                    
                    // Define the artifact
                    def uploadSpec = """{
                        "files": [
                            {
                                "pattern": "**/*.war",
                                "target": "online-bookstore/${BUILD_ID}/onlinebookstore-1.0.war"
                            }
                        ]
                    }"""

                    // Upload the artifact
                    server.upload(uploadSpec)
                }
            }
        }
        stage('Download from Artifactory') {
            steps {
                script {
					          sh 'mkdir -p ${WORKSPACE}/ready_deploy_binary/'
                    // Define the Artifactory server instance
                    def server = Artifactory.server 'jfrog-instance'  // Replace 'ServerID' with your Artifactory server ID from Jenkins configuration.

                    // Define download spec
                    def downloadSpec = """{
                        "files": [
                            {
                                "pattern": "online-bookstore/${BUILD_ID}/onlinebookstore-1.0.war",
                                "target": "${WORKSPACE}/ready_deploy_binary/"
                            }
                        ]
                    }"""

                    // Download the artifact
                    server.download downloadSpec
                }
            }
        }
	stage('Deploy to Tomcat') {
            steps {
                script {
                    // Replace with your Tomcat server details and credentials ID
                    def tomcat_url = 'http://54.173.76.28:8080'
                    def credentialsId = 'tomcat-deployer'
                    def war_file_path = '${WORKSPACE}/ready_deploy_binary/${BUILD_ID}/onlinebookstore-1.0.war'
                    def context_path = '/onlinebookstore'

                    // Deploy .war to Tomcat
                    sh """curl -T ${war_file_path} \\
                           -u ${credentialsId} \\
                           "${tomcat_url}/manager/text/deploy?path=${context_path}&update=true" """
                }
            }
        }
  }
}
