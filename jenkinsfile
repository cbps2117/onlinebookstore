pipeline {
	agent any
	tools {
		maven 'maven'
	}
	stages {
		stage('clone-repo'){
			steps {
				checkout scm
			}
		}
		stage('Build') {
			steps {
				sh 'mvn clean install'
			}
		}
		stage('sonarqube-scanging'){
			steps {
				withSonarQubeEnv('my-sonarqube-server') {
					sh 'mvn sonar:sonar'
				}
			}
		}
		stage('quality-gate-check'){
			steps {
				sh 'sleep 30s'
				waitForQualityGate abortPipeline: true
			}
		}
		stage('artifactory-upload'){
			steps{
				script {
					// Define a new Artifactory server instance
					def server = Artifactory.server 'jfrog-instance'  // Replace 'ServerID' with your Artifactory server ID from Jenkins configuration.
					
					// Define the artifact
					def uploadSpec = """{
						"files": [
							{
								"pattern": "**/*.war",
								"target": "online-bookstore/${BUILD_TIMESTAMP}/onlinebookstore-1.0.war"
							}
						]
					}"""

					// Upload the artifact
					server.upload(uploadSpec)
                }
			}
		}
		stage('download from artifactory'){
			steps{
				script{
					sh 'mkdir -p ${WORKSPACE}\readytodeploy'
					def server = Artifactory.server 'jfrog-instance'
					def downloadSpec = """{
	                        "files": [
	                            {
	                                "pattern": "online-bookstore/${BUILD_TIMESTAMP}/onlinebookstore-1.0.war",
	                                "target": "${WORKSPACE}/ready_deploy_binary/"
	                            }
	                        ]
	                    }"""
	
	                    // Download the artifact
                    server.download downloadSpec
				}
			}
		}
		stage('Deploy to Tomcat') {
			steps {
				// Use Jenkins credentials binding
				withCredentials([usernamePassword(credentialsId: 'TomcatCredentials', usernameVariable: 'TOMCAT_USER', passwordVariable: 'TOMCAT_PASS')]) {
					script {
						def tomcatUrl = 'http://18.234.161.208:8080'
						def warFile = '${WORKSPACE}/ready_deploy_binary/${BUILD_TIMESTAMP}/onlinebookstore-1.0.war' // Adjust the path to your WAR file.
						
						echo "Executing: curl -T ${warFile} -u $TOMCAT_USER:$TOMCAT_PASS '${tomcatUrl}?path=/your-context-path&update=true'"
						sh """
							curl -T ${warFile} -u $TOMCAT_USER:$TOMCAT_PASS "${tomcatUrl}?path=/your-context-path&update=true"
						"""
					}
				}
			}
		}

	}
}		
